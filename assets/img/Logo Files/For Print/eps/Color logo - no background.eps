%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.05.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2412 2273
%%HiResBoundingBox: 0 0 2411.04 2272.0798
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011, 2022 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2411.04 2272.0798 re
W
q
[0.24 0 0 -0.24 0 2272.0798] cm
q
0 0 10045.833 9464.4619 re
W*
q
[40.039959 0 0 40.042225 3255.4238 -40.573711] cm
/DeviceRGB {} CS
[0.3922 0.4314 0.7961] SC
/DeviceRGB {} cs
[0.3922 0.4314 0.7961] sc
51.726257 22.007813 m
47.454895 22.007813 43.993408 18.559509 43.993408 14.288147 c
43.993408 16.430359 43.131348 18.350464 41.733704 19.748047 c
40.33606 21.145752 38.402893 22.007813 36.273743 22.007813 c
38.402893 22.007813 40.33606 22.869995 41.733704 24.267578 c
43.131348 25.678223 43.993408 27.611572 43.993408 29.740723 c
43.993408 25.469238 47.454895 22.007813 51.726257 22.007813 c
h
f
31.240295 16.84314 m
31.240295 14.779175 32.912903 13.106567 34.976807 13.106567 c
32.912903 13.106567 31.240295 11.440308 31.240295 9.376465 c
31.240295 10.41156 30.823792 11.339356 30.148376 12.014648 c
29.473022 12.690063 28.53894 13.106567 27.510132 13.106567 c
28.53894 13.106567 29.473022 13.523193 30.148376 14.198486 c
30.823792 14.880127 31.240295 15.81427 31.240295 16.84314 c
h
f
56.753296 16.84314 m
56.753296 14.779175 58.425903 13.106567 60.489868 13.106567 c
58.425903 13.106567 56.753296 11.440308 56.753296 9.376465 c
56.753296 10.41156 56.336792 11.339356 55.661438 12.014648 c
54.986084 12.690063 54.051941 13.106567 53.023193 13.106567 c
54.051941 13.106567 54.986084 13.523193 55.661438 14.198486 c
56.336792 14.880127 56.753296 15.81427 56.753296 16.84314 c
h
f
18.164795 27.242188 m
17.014771 26.932129 15.894775 27.802246 15.894775 28.992188 c
15.894775 29.472168 l
21.944763 30.422119 31.924805 32.372192 39.504761 35.622192 c
33.334778 31.622192 22.77478 28.492188 18.164795 27.242188 c
h
f
72.104797 29.472168 m
72.104797 28.992188 l
72.104797 27.802246 70.984802 26.932129 69.834778 27.242188 c
65.224792 28.492188 54.674805 31.612183 48.504761 35.612183 c
56.094788 32.372192 66.0448 30.432129 72.104797 29.472168 c
h
f
13.164795 31.072266 m
12.164795 30.932129 11.27478 31.712158 11.27478 32.722168 c
11.27478 32.832275 l
38.334778 37.302246 l
29.644775 33.682129 17.744812 31.732178 13.164795 31.072266 c
h
f
76.724792 32.832275 m
76.724792 32.722168 l
76.724792 31.712158 75.834778 30.932129 74.834778 31.072266 c
70.254761 31.732178 58.334778 33.682129 49.644775 37.312256 c
76.724792 32.832275 l
h
f
4.019837 36.914551 m
8.138977 69.900269 l
8.419251 72.144531 10.168457 73.922607 12.407837 74.239746 c
42.626404 78.517822 l
42.626404 40.038086 l
6.914002 34.133057 l
5.262085 33.859863 3.812378 35.253174 4.019837 36.914551 c
h
f
81.085999 34.133057 m
44.626404 40.161621 l
44.626404 78.623535 l
75.592163 74.239746 l
77.831543 73.922607 79.58075 72.144531 79.861023 69.900269 c
83.980164 36.914551 l
84.187622 35.253174 82.737915 33.859863 81.085999 34.133057 c
h
f
Q
q
[201.67149 0 0 201.68289 165.457214 -209.17587] cm
/DeviceRGB {} CS
[0.0667 0.0667 0.0667] SC
/DeviceRGB {} cs
[0.0667 0.0667 0.0667] sc
16.040001 30 m
15.880001 27.08 14.560001 25.360001 11.520001 25.360001 c
10.68 25.360001 9.960001 25.480001 9.360001 25.720001 c
7.52 26.560001 6.840001 28.120001 6.840001 30.040001 c
6.840001 30.68 6.920001 31.280001 7.120001 31.800001 c
7.720001 33.880001 9.520001 34.639999 11.520001 34.639999 c
14.56 34.639999 16.040001 33 16.040001 30 c
h
23.639999 40 m
17.639999 40 l
17.24 39 16.879999 38 16.639999 36.959999 c
15.28 39.200001 13.199999 40.200001 10.639999 40.200001 c
4.92 40.200001 0.839999 35.400002 0.839999 29.920002 c
0.839999 23.600002 5.559999 19.800003 11.52 19.800003 c
17.879999 19.800003 21.879999 23.880003 22.040001 30.000004 c
22.080002 30.520004 22.080002 31.120005 22.080002 31.840004 c
22.080002 34.640003 22.520002 37.440002 23.640001 40.000004 c
23.639999 40 l
h
47.332001 30 m
47.332001 40 l
41.332001 40 l
41.332001 30 l
41.332001 27.24 40.052002 25.360001 37.132 25.360001 c
34.251999 25.360001 32.931999 27.280001 32.931999 30 c
32.931999 40 l
26.931999 40 l
26.931999 30 l
26.931999 23.84 31.171999 19.799999 37.132 19.799999 c
43.332001 19.799999 47.332001 24.039999 47.332001 30 c
h
f
Q
q
[36.536819 0 0 36.538891 2341.8354 8395.3525] cm
/DeviceRGB {} CS
[0.3922 0.4314 0.7961] SC
/DeviceRGB {} cs
[0.3922 0.4314 0.7961] sc
8.14 20 m
7.04 15.58 l
2.16 15.58 l
1.06 20 l
0.06 20 l
4.2 5 l
5.06 5 l
9.18 20 l
8.14 20 l
h
4.66 5.94 m
2.4 14.620001 l
6.78 14.620001 l
4.66 5.94 l
h
18.6185 16.219999 m
18.60516 16.88666 18.541918 17.469999 18.428579 17.969999 c
18.315241 18.469999 18.121899 18.883339 17.848558 19.209999 c
17.575218 19.536659 17.215218 19.779999 16.768558 19.939999 c
16.321899 20.099998 15.758558 20.179998 15.078558 20.179998 c
13.905258 20.179998 13.051958 19.853338 12.518559 19.199999 c
11.985159 18.546659 11.718558 17.553299 11.718558 16.219999 c
11.718558 8.82 l
11.718558 7.4867 11.988559 6.4934 12.528559 5.84 c
13.068559 5.1866 13.991859 4.86 15.298559 4.86 c
16.471859 4.86 17.311958 5.18666 17.81856 5.84 c
18.325161 6.49334 18.591879 7.4867 18.61854 8.82 c
18.63854 9.74 l
17.71854 9.74 l
17.69854 8.58 l
17.69854 8.24666 17.665199 7.91 17.598539 7.57 c
17.531879 7.23 17.411879 6.92 17.238539 6.639999 c
17.065199 6.359999 16.821859 6.133339 16.508518 5.96 c
16.195177 5.78666 15.778519 5.7 15.258518 5.7 c
14.751858 5.7 14.328518 5.78 13.988518 5.94 c
13.648518 6.099999 13.378518 6.32 13.178517 6.599999 c
12.978517 6.879999 12.841857 7.21 12.768518 7.589999 c
12.695178 7.969999 12.658518 8.379999 12.658518 8.82 c
12.698518 16.32 l
12.698518 17.24 12.868518 17.959999 13.208518 18.48 c
13.548518 19 14.171858 19.26 15.078518 19.26 c
15.598518 19.26 16.028519 19.190001 16.368519 19.050001 c
16.708519 18.910002 16.97518 18.713341 17.168518 18.460001 c
17.361856 18.206661 17.498518 17.900002 17.578518 17.540001 c
17.658518 17.18 17.698519 16.786661 17.698519 16.360001 c
17.718519 15.06 l
18.638519 15.06 l
18.6185 16.219999 l
h
29.896999 20 m
28.796999 15.58 l
23.917 15.58 l
22.816999 20 l
21.816999 20 l
25.956999 5 l
26.816999 5 l
30.937 20 l
29.896999 20 l
h
26.417 5.94 m
24.157 14.620001 l
28.536999 14.620001 l
26.417 5.94 l
h
41.3755 16.959999 m
41.282158 17.373339 41.1455 17.76334 40.9655 18.129999 c
40.7855 18.496658 40.54884 18.82 40.255501 19.099998 c
39.962162 19.379997 39.605499 19.599998 39.185501 19.759998 c
38.765503 19.919998 38.275501 19.999998 37.7155 19.999998 c
34.0755 19.999998 l
34.0755 4.999998 l
37.5755 4.999998 l
38.588799 4.999998 39.438801 5.236658 40.1255 5.709998 c
40.812199 6.183338 41.255501 6.979998 41.455502 8.099999 c
41.495502 8.313338 41.528843 8.643338 41.5555 9.089998 c
41.582157 9.536658 41.602161 10.049998 41.615501 10.629998 c
41.628841 11.209998 41.635502 11.819998 41.635502 12.459998 c
41.635502 13.099999 41.625504 13.713298 41.605503 14.299998 c
41.585503 14.886699 41.555504 15.416699 41.515503 15.889998 c
41.475502 16.363298 41.428844 16.719999 41.375504 16.959999 c
41.3755 16.959999 l
h
37.3955 6.02 m
35.0755 6.020019 l
35.0755 18.920019 l
37.675499 18.920019 l
38.0355 18.920019 38.355499 18.85668 38.635498 18.730019 c
38.915497 18.603357 39.165497 18.436699 39.385498 18.230038 c
39.605499 18.023376 39.788837 17.793377 39.935497 17.540037 c
40.082157 17.286697 40.202156 17.040037 40.295498 16.800037 c
40.36216 16.626697 40.418819 16.313358 40.465477 15.860018 c
40.512135 15.406677 40.545479 14.890018 40.565475 14.310018 c
40.585472 13.730018 40.595474 13.113318 40.595474 12.460017 c
40.595474 11.806717 40.585476 11.193317 40.565475 10.620017 c
40.545475 10.046717 40.515476 9.540017 40.475475 9.100018 c
40.435474 8.660018 40.388817 8.353357 40.335476 8.180018 c
40.255474 7.940018 40.148815 7.690018 40.015476 7.430018 c
39.882137 7.170017 39.705475 6.936678 39.485477 6.730018 c
39.26548 6.523358 38.985477 6.353358 38.645477 6.220017 c
38.305477 6.086677 37.888817 6.020018 37.395477 6.020018 c
37.3955 6.02 l
h
45.234001 20 m
45.234001 5 l
52.594002 5 l
52.594002 6.16 l
46.274002 6.16 l
46.274002 11.86 l
52.534004 11.86 l
52.534004 12.78 l
46.274002 12.78 l
46.274002 18.84 l
52.734001 18.84 l
52.734001 20 l
45.234001 20 l
h
65.532501 20 m
65.532501 7.28 l
61.912502 15.94 l
60.792503 15.919999 l
57.252502 7.259999 l
57.252502 20 l
56.272503 20 l
56.272503 5 l
57.312504 5 l
61.372505 14.76 l
65.452507 5 l
66.512505 5 l
66.512505 20 l
65.532501 20 l
h
70.630997 20 m
70.630997 5 l
71.910995 5 l
71.910995 20 l
70.630997 20 l
h
82.809502 16.219999 m
82.796158 16.88666 82.732918 17.469999 82.619583 17.969999 c
82.506248 18.469999 82.312904 18.883339 82.039566 19.209999 c
81.766228 19.536659 81.406227 19.779999 80.959564 19.939999 c
80.512901 20.099998 79.949562 20.179998 79.269562 20.179998 c
78.09626 20.179998 77.242966 19.853338 76.709564 19.199999 c
76.176163 18.546659 75.909561 17.553299 75.909561 16.219999 c
75.909561 8.82 l
75.909561 7.4867 76.179558 6.4934 76.719559 5.84 c
77.25956 5.1866 78.182861 4.86 79.489555 4.86 c
80.662857 4.86 81.502953 5.18666 82.009552 5.84 c
82.516151 6.49334 82.782875 7.4867 82.809532 8.82 c
82.829529 9.74 l
81.909531 9.74 l
81.889534 8.58 l
81.889534 8.24666 81.856194 7.91 81.789536 7.57 c
81.722878 7.23 81.602875 6.92 81.429535 6.639999 c
81.256195 6.359999 81.012856 6.133339 80.699516 5.96 c
80.386177 5.78666 79.969513 5.7 79.449516 5.7 c
78.942856 5.7 78.519516 5.78 78.17952 5.94 c
77.839523 6.099999 77.569519 6.32 77.369522 6.599999 c
77.169525 6.879999 77.03286 7.21 76.959518 7.589999 c
76.886177 7.969999 76.849518 8.379999 76.849518 8.82 c
76.889519 16.32 l
76.889519 17.24 77.059517 17.959999 77.399521 18.48 c
77.739525 19 78.362862 19.26 79.269524 19.26 c
79.78952 19.26 80.219521 19.190001 80.559525 19.050001 c
80.899529 18.910002 81.166183 18.713341 81.359528 18.460001 c
81.552872 18.206661 81.689529 17.900002 81.769531 17.540001 c
81.849533 17.18 81.889534 16.786661 81.889534 16.360001 c
81.909531 15.06 l
82.829529 15.06 l
82.809502 16.219999 l
h
99.286499 20 m
93.486496 7.12 l
93.486496 20 l
92.386497 20 l
92.386497 5 l
93.566498 5 l
99.366501 17.299999 l
99.5065 4.999999 l
100.586502 4.999999 l
100.586502 20 l
99.286499 20 l
h
104.385002 20 m
104.385002 5 l
111.745003 5 l
111.745003 6.16 l
105.425003 6.16 l
105.425003 11.86 l
111.685005 11.86 l
111.685005 12.78 l
105.425003 12.78 l
105.425003 18.84 l
111.885002 18.84 l
111.885002 20 l
104.385002 20 l
h
122.783501 20 m
119.4235 12.639999 l
116.083504 20 l
114.703506 20 l
118.343506 12.5 l
114.703506 5 l
116.083504 5 l
119.4235 12.360001 l
122.783501 5.000001 l
124.143501 5.000001 l
120.503502 12.5 l
124.143501 20 l
122.783501 20 l
h
131.022003 20.18 m
129.795303 20.18 128.8452 19.84664 128.171997 19.18 c
127.498795 18.513361 127.161995 17.526701 127.161995 16.220001 c
127.161995 5.000001 l
128.241989 5.000001 l
128.241989 16.16 l
128.241989 16.479999 128.285324 16.81666 128.371994 17.17 c
128.458664 17.52334 128.608658 17.84334 128.821991 18.130001 c
129.035324 18.416662 129.318665 18.65332 129.672012 18.839981 c
130.02536 19.026642 130.462006 19.119982 130.98201 19.119982 c
131.555344 19.119982 132.028717 19.036642 132.402008 18.869982 c
132.775299 18.703321 133.075348 18.473322 133.302002 18.179981 c
133.528656 17.886641 133.68866 17.539982 133.781998 17.13998 c
133.875336 16.739979 133.921997 16.31332 133.921997 15.859981 c
133.921997 4.999981 l
134.981995 4.999981 l
134.981995 16.219982 l
134.981995 17.553282 134.658661 18.546581 134.011993 19.199982 c
133.365326 19.853382 132.368698 20.179981 131.021988 20.179981 c
131.022003 20.18 l
h
142.880493 20.18 m
142.227158 20.18 141.646988 20.093262 141.140396 19.91992 c
140.633804 19.746578 140.207077 19.469919 139.860397 19.08992 c
139.513718 18.709921 139.25708 18.213261 139.090424 17.59992 c
138.923767 16.98658 138.85376 16.24662 138.880417 15.37992 c
140.080414 15.37992 l
140.080414 15.80658 140.100418 16.24992 140.140411 16.709921 c
140.180405 17.169922 140.287079 17.58992 140.460419 17.969921 c
140.633759 18.349922 140.897095 18.659922 141.250443 18.899921 c
141.60379 19.139921 142.093781 19.259922 142.720444 19.259922 c
143.253784 19.259922 143.707123 19.179922 144.080444 19.019922 c
144.453766 18.859922 144.757126 18.646582 144.990463 18.379923 c
145.223801 18.113264 145.387146 17.799923 145.480484 17.439922 c
145.573822 17.079922 145.620483 16.706583 145.620483 16.319922 c
145.620483 15.866582 145.53714 15.469921 145.370483 15.129921 c
145.203827 14.789921 144.983826 14.486581 144.71048 14.219921 c
144.437134 13.953261 144.117142 13.716601 143.750473 13.509941 c
143.383804 13.303281 143.000473 13.119941 142.600479 12.959941 c
141.96048 12.706601 141.400482 12.456601 140.920486 12.209941 c
140.440491 11.963281 140.04715 11.686621 139.740494 11.379961 c
139.433838 11.073301 139.203827 10.716641 139.050491 10.309961 c
138.897156 9.903282 138.820496 9.406641 138.820496 8.819962 c
138.820496 7.486661 139.170502 6.493362 139.870499 5.839962 c
140.570496 5.186562 141.573792 4.859962 142.880493 4.859962 c
144.013794 4.859962 144.910492 5.189961 145.570496 5.849961 c
146.230499 6.509961 146.560501 7.499961 146.560501 8.819962 c
146.560501 9.919962 l
145.440506 9.919962 l
145.440506 8.719962 l
145.440506 8.306623 145.390503 7.923282 145.290512 7.569962 c
145.190521 7.216642 145.033859 6.906622 144.820511 6.639962 c
144.607162 6.373303 144.337173 6.163302 144.010513 6.009962 c
143.683853 5.856622 143.293854 5.779962 142.840515 5.779962 c
141.773819 5.779962 141.010513 6.059962 140.550522 6.619962 c
140.09053 7.179962 139.880524 7.933262 139.920517 8.879962 c
139.933853 9.293302 140.010513 9.646642 140.150513 9.939962 c
140.290512 10.233283 140.477173 10.489963 140.71051 10.709963 c
140.943848 10.929963 141.223846 11.126623 141.550507 11.299963 c
141.877167 11.473303 142.240509 11.646643 142.640503 11.819983 c
143.107162 12.019982 143.570496 12.233322 144.030502 12.459983 c
144.490509 12.686644 144.920502 12.966642 145.320496 13.299983 c
145.72049 13.646643 146.050491 14.049983 146.310501 14.509983 c
146.570511 14.969983 146.7005 15.539983 146.7005 16.219982 c
146.7005 17.539982 146.363846 18.529982 145.690506 19.189981 c
145.017166 19.849981 144.080505 20.179981 142.880508 20.179981 c
142.880493 20.18 l
h
f
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
